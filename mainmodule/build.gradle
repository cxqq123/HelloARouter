apply plugin: 'com.android.application'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId


android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId appId["main"]
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isModuleRun.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude '**/debug/**'
                }
            }
        }
    }
}

//编译期组件隔离，运行期组件按需依赖
if (!isModuleRun.toBoolean()) {
    //获取当前的task
    def tasks = project.gradle.startParameter.taskNames
    for (String task : tasks) {
        def upperName = task.toUpperCase()
        //判断task 是编译期还是运行期
        if (upperName.contains("ASSEMBLE") || upperName.contains("INSTALL")) {
            dependencies.add("compile", project.project(':' + 'cardmodule'))
            dependencies.add("compile", project.project(':' + 'mapmodule'))
            dependencies.add("compile", project.project(':' + 'usermodule'))
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile project(':routermodule')
}
